/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/YuccaBerbicara.glb 
*/

import React, { useEffect } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';
import { useCharacterAnimations } from '../contexts/CharacterAnimations';

const YuccaBerbicara = (props) => {
  const group = React.useRef()
  const { scene, animations } = useGLTF('/models/YuccaBerbicara.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { setAnimations, animationIndex } = useCharacterAnimations();
  const { actions, names } = useAnimations(animations, group)

  useEffect(() => {
    setAnimations(names);
  }, [names, setAnimations]);

  useEffect(() => {
    Object.values(actions).forEach((action) => {
      action.stop();
    });

    const currentAction = actions[names[animationIndex]];
    if (currentAction) {
      currentAction.timeScale = animationIndex === 1 ? 2.0 : 1.0;
      currentAction.reset().fadeIn(0.5).play();
    }

    return () => {
      if (currentAction) {
        currentAction.fadeOut(0.5);
      }
    };
  }, [animationIndex, actions, names]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="metarig001">
          <primitive object={nodes.spine} />
          <skinnedMesh name="body" geometry={nodes.body.geometry} material={materials.skin} skeleton={nodes.body.skeleton} />
          <skinnedMesh name="horn" geometry={nodes.horn.geometry} material={materials.skin} skeleton={nodes.horn.skeleton} />
          <skinnedMesh name="tail" geometry={nodes.tail.geometry} material={materials.skin} skeleton={nodes.tail.skeleton} />
        </group>
      </group>
    </group>
  )
}

export default YuccaBerbicara

useGLTF.preload('/models/YuccaBerbicara.glb')
