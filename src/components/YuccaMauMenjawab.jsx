/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/YuccaMauMenjawab.glb 
*/

import React, { useEffect, useRef } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';
import { useCharacterAnimations } from '../contexts/CharacterAnimations';

const TRANSITION_DURATION = 0.5;

const YuccaMauMenjawab = (props) => {
  const group = React.useRef()
  const { scene, animations } = useGLTF('/models/YuccaMauMenjawab.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group);
  const activeActionRef = useRef(null);
  const { isDoneThinking } = useCharacterAnimations();

  useEffect(() => {
    const availableActions = Object.values(actions);
    if (availableActions.length > 0 && isDoneThinking) {
      const randomIndex = Math.floor(Math.random() * availableActions.length);
      const action = availableActions[randomIndex];
      
      if (action) {
        if (activeActionRef.current && activeActionRef.current !== action) {
          activeActionRef.current.fadeOut(TRANSITION_DURATION);
        }

        action.reset()
             .setLoop(true)
             .setEffectiveTimeScale(1)
             .fadeIn(TRANSITION_DURATION)
             .play();

        activeActionRef.current = action;
      }
    }

    return () => {
      if (activeActionRef.current) {
        activeActionRef.current.fadeOut(TRANSITION_DURATION);
        activeActionRef.current.stop();
      }
    };
  }, [actions, isDoneThinking]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="metarig001" position={[-0.077, -0.16, 0]}>
          <primitive object={nodes.spine} />
          <skinnedMesh name="body" geometry={nodes.body.geometry} material={materials.skin} skeleton={nodes.body.skeleton} castShadow
            receiveShadow />
          <skinnedMesh name="horn" geometry={nodes.horn.geometry} material={materials.skin} skeleton={nodes.horn.skeleton} castShadow
            receiveShadow />
          <skinnedMesh name="tail" geometry={nodes.tail.geometry} material={materials.skin} skeleton={nodes.tail.skeleton} castShadow
            receiveShadow />
        </group>
        <mesh name="pngtree-shining-bright-light-bulb-png-image_6136095" geometry={nodes['pngtree-shining-bright-light-bulb-png-image_6136095'].geometry} material={materials['pngtree-shining-bright-light-bulb-png-image_6136095']} position={[-0.802, 1.132, 0.123]} scale={0} />
      </group>
    </group>
  )
}

export default YuccaMauMenjawab

useGLTF.preload('/models/YuccaMauMenjawab.glb')
