/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/YuccaMendengarR.glb 
*/

import React, { useEffect, useRef } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';
import { useCharacterAnimations } from '../contexts/CharacterAnimations';

const TRANSITION_DURATION = 0.5;

const YuccaMendengarR = (props) => {
  const group = useRef();
  const { scene, animations } = useGLTF('/models/YuccaMendengarR.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  const activeActionRef = useRef(null);
  const { isEndingListening } = useCharacterAnimations();

  useEffect(() => {
    const availableActions = Object.values(actions);
    if (availableActions.length > 0) {
      const action = availableActions[0];
      
      if (action) {
        const duration = action.getClip().duration;
        console.log('YuccaMendengar animation duration:', duration * 1000, 'ms');

        // Stop current animation with fadeout if exists
        if (activeActionRef.current && activeActionRef.current !== action) {
          activeActionRef.current.fadeOut(TRANSITION_DURATION);
          activeActionRef.current.stop();
        }

        if (isEndingListening) {
          // Set starting time to 75% through the animation
          const startTime = duration * 0.75;
          action.reset()
               .setLoop(1)
               .setEffectiveTimeScale(1)
          
          // Explicitly set the time after other settings
          action.time = startTime;
          action.clampWhenFinished = true;
          action.play();
          
          console.log('Playing ending sequence from:', startTime);
        } else {
          // Normal play from start
          action.reset()
               .setLoop(1)
               .setEffectiveTimeScale(1)
               .play();
        }

        activeActionRef.current = action;
      }
    }

    return () => {
      if (activeActionRef.current) {
        activeActionRef.current.fadeOut(TRANSITION_DURATION);
        setTimeout(() => {
          if (activeActionRef.current) {
            activeActionRef.current.stop();
          }
        }, TRANSITION_DURATION * 1000);
      }
    };
  }, [actions, isEndingListening]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="metarig001">
          <primitive object={nodes.spine} />
          <skinnedMesh name="body" geometry={nodes.body.geometry} material={materials.skin} skeleton={nodes.body.skeleton} castShadow
            receiveShadow />
          <skinnedMesh name="horn" geometry={nodes.horn.geometry} material={materials.skin} skeleton={nodes.horn.skeleton} castShadow
            receiveShadow />
          <skinnedMesh name="tail" geometry={nodes.tail.geometry} material={materials.skin} skeleton={nodes.tail.skeleton} castShadow
            receiveShadow />
        </group>
      </group>
    </group>
  )
}

export default YuccaMendengarR

useGLTF.preload('/models/YuccaMendengarR.glb')
