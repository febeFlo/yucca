/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/YuccaMendengarLoop.glb 
*/

import React, { useEffect, useRef } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations } from '@react-three/drei';
import { SkeletonUtils } from 'three-stdlib';
import * as THREE from 'three';
import { useCharacterAnimations } from '../contexts/CharacterAnimations';

const YuccaMendengarLoop = (props) => {
  const group = useRef();
  const { scene, animations } = useGLTF('/models/YuccaMendengarLoop.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);
  const activeActionRef = useRef(null);

  useEffect(() => {
    const availableActions = Object.values(actions);
    if (availableActions.length > 0) {
      const action = availableActions[0];
      
      if (action) {
        // Log untuk debugging
        console.log('Starting MendengarLoop animation');
        console.log('Animation duration:', action.getClip().duration);

        // Stop existing animation if any
        if (activeActionRef.current && activeActionRef.current !== action) {
          activeActionRef.current.fadeOut(0.5);
          activeActionRef.current.stop();
        }

        // Set up ping-pong loop
        action.reset()
             .setLoop(THREE.LoopPingPong, Infinity) // Menggunakan PingPong loop mode
             .setEffectiveTimeScale(1)
             .play();

        // Tambahkan listener untuk clamp pada akhir animasi
        action.clampWhenFinished = true;

        activeActionRef.current = action;

        console.log('Animation loop mode:', action.loop);
      }
    }

    return () => {
      if (activeActionRef.current) {
        activeActionRef.current.fadeOut(0.5);
        setTimeout(() => {
          if (activeActionRef.current) {
            activeActionRef.current.stop();
          }
        }, 500);
      }
    };
  }, [actions]);


  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="metarig001">
          <primitive object={nodes.spine} />
          <skinnedMesh name="body" geometry={nodes.body.geometry} material={materials.skin} skeleton={nodes.body.skeleton} castShadow
            receiveShadow/>
          <skinnedMesh name="horn" geometry={nodes.horn.geometry} material={materials.skin} skeleton={nodes.horn.skeleton} castShadow
            receiveShadow/>
          <skinnedMesh name="tail" geometry={nodes.tail.geometry} material={materials.skin} skeleton={nodes.tail.skeleton} castShadow
            receiveShadow/>
        </group>
      </group>
    </group>
  )
}

export default YuccaMendengarLoop

useGLTF.preload('/models/YuccaMendengarLoop.glb')
